## 개요
* spring social을 이용한 web 인증 및 posting 예제를 작성하여 유사한 개발에 참고할수 있도록 함.

## SNS 앱등록
* 서비스는 SNS 앱을 이용하여 SNS 연동기능을 수행한다.  
* SNS User는 App에 특정 권한(친구목록조회, Posting 등)을 위임할 수 있다.

## 서비스에서 할일,,,,,
* 인증정보 저장.
 * 인증정보는 OAuth 인증절차를 거쳐서 얻을수 있으며 access token key 및 secret key 로 구성된다.
* 저장된 인증정보가 있으면 SNS User를 대신하여 위임받은 일련의 작업을 대신할 수 있다. (친구목록조회, Posting 등)

## 인증 절차
* 대부분의 SNS는 OAuth인증방식을 따른다.
 * 서비스는 인증을 획득할 SNS App의 comsumer key & secret key 값을 이용하여 인증요청을 한다.
 * SNS User가 직접 SNS에 로그인 하여 App에 권한을 위임하면 접속권한 정보(Access Grant) 가 서버로 전송된다.
 * 서비스는 해당 접속권한 정보(access token & secret)를 저장한다.

## 인증 방식
* 앱 인증
 * 클라이언트별 인증모듈을 이용하여  접속권한 정보를 획득한다.
 * 접속권한 정보를 서버로 전송하여 저장한다.
* 웹 서버 인증
 * 클라이언트는 브라우저로 웹 서버 인증 URL을 호출한다.
 * 서버에서 인증처리 후 접속권한 정보를 저장한다.

## Sample 이 포함하고 있는 내용 
* 웹서버 인증 및 접속정보 저장 예제
 * Sprong social 이 제공하는 JdbcUsersConnectionRepository를 이용한 접속정보 저장.
 * Customizing DAO를 이용한 접속정보 저장.
* Posting 예제

## Issue
* OAuth 1.0 인증시 HttpSession에 Request Token 값을 저장.
 * 인증을 담당하는 서버가 session clustering 되지 않은 여러 대의 서버라면 정상적으로 동작하지 않는다. session을 사용하지 않는 naver 서비스 모두에 해당됨.
 * OAuth 1.0 인증에서 SNS Provider는 서비스에 Request Token을 전송한 후  Verifier를 전송한다. 그리고 서비스는 Access Token을 획득하기 위해 두 가지 값을 모두 전송해야 한다. Spring social 모듈은 Request Token을 HttpSession에 저장해두었다가 꺼내서 함께 전송한다.
 * Twitter 가 여기에 해당됨.
 * 인증 서버를 분리하여 한대로 운영하던지 global session을 적용해야 함.
* 서비스의 로그인 정보를 Cookie에 저장하지 않는 경우 로그인 정보를 임시저장할 곳이 필요함.
 * 모바일용 API는 Cookie를 사용하지 않고 request header에 저장하는 경우가 있음. 뭐라고 하는지는 모르겠음. smart id?
 * 접속 정보를 서비스 userId와 함께 저장할 경우, SNS Provider가 최종적으로 서버로 전송해주는 reqeust에는 접속 정보(access token, secret)만 있고 서비스 사용자 인증 정보는 없음.
 * 쿠키에 저장할 수도 있고, DB에 저장할 수도 있음.
